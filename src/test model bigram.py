
# coding: utf-8

import numpy as np
import nltk
from itertools import permutations
import common
import replaceHeb2Eng as replace
from Tkinter import *

# Init array,and dict
vocDict = common.getVocabulary()
testSens, answerSens = common.getTestAndAnswerSentences()
bigramModel = common.getBigramModel()

vocDict = common.smoodUnkFunc(vocDict,1)

n=2
lemda = 0.0001

# Return all possible letter combinations for a word
def perWord(word):
    if len(word) > 3 and len(word) < 9 and not common.filterOtherTok(word):
        return np.unique([''.join(p) for p in permutations(word)])
    else:
        return []

# The probability of the word given the previous word
def calcProWithSmoodAddLemda(word, prevWord):
    if str((prevWord, word)) in bigramModel:
        countNgram = float(bigramModel[str((prevWord, word))]) + lemda
    else:
        countNgram = lemda
    if word in vocDict:
        countWord = vocDict[word]
    else:
        countWord = vocDict['unk']

    return float(countNgram)/(float(countWord)+lemda*len(vocDict))

# The probability of the word given the previous word and the next word
def calcProWithSmoodAddLemdaBeforeAndAfter(word, prevWord, nextWord):
    proBefore = calcProWithSmoodAddLemda(word, prevWord)
    proAfter = calcProWithSmoodAddLemda(nextWord, word)
    
    return proBefore * proAfter

# Test of sentence
# I check for each word if you have more possible letter combinations
# If she has, i check how combination she is the highest probability, and chooses it.
# If the selected word, diffrent from the source word, i check the last word again.
def fit(sen):
    newSen = list(sen[:])
    newSen.insert(0,'<s>')
    newSen.append('</s>')
    result = []
    idx = 1
    while idx<len(newSen)-1:
        perms = perWord(newSen[idx])
        if len(perms) > 1:
            poosWords = []
            for per in perms:
                if per in vocDict and per[0]==newSen[idx][0] and per[-1]==newSen[idx][-1]:
                    poosWords.append(per)
            path = [calcProWithSmoodAddLemdaBeforeAndAfter(per,newSen[idx-1],newSen[idx+1]) for per in poosWords]
            newWord = poosWords[np.argmax(path)]
            if newWord == newSen[idx] or len(result) == 0:
                result.append(newWord)
                idx += 1
            elif len(result) < idx:
                newSen[idx] = newWord
                idx -= 1
                del result[idx-1]
            elif result[idx-1] != newWord:
                newSen[idx] = newWord
                idx -= 1
                del result[idx-1]
            else:
                idx += 1
        else:
            result.append(newSen[idx])
            idx += 1
    return result

def checkForAllTest():
    results = []
    for sen in testSens:
        result = fit(sen)
        results.append(result)

    # Check result, I check if all the words in the sentence are the same for the expected result.
    equals = [results[i] == answerSens[i] for i in xrange(len(answerSens))]

    FinalEquals = nltk.FreqDist(equals)
    print FinalEquals
    print FinalEquals[True] / FinalEquals[False]

#region GUI:

# Fit sentence
def show_entry_fields(event=None):

    sen = senHebToArrayEng(e1.get())
    sen = deleteStamValues(sen)
    result = fit(sen)
    hebNewSen = senEngToArrayHeb(" ".join(result))    
    resText.set("תוצר :"+" ".join(hebNewSen))
    sourceSen.configure(text = u"מקור :" + e1.get())
    
    wordChange(sen,result)
    return result

# Choice sentence for error list LPD test corpus
def enter_sen_for_error_test_list(event=None):
    numberSen = s2.get()
    sen = senEngToArrayHeb(" ".join(testSens[int(numberSen)]))
    e1.delete(0, 'end')
    e1.insert(0, " ".join(sen))
    result = show_entry_fields(event)
    checkError(int(numberSen), result)

# Choice sentnce for list LPD test corpus
def enter_sen_for_test_list(event=None):
    numberSen = s1.get()
    sen = senEngToArrayHeb(" ".join(testSens[int(numberSen) - 1]))
    e1.delete(0, 'end')
    e1.insert(0, " ".join(sen))
    show_entry_fields(event)

# Show the change word
def wordChange(source,result):
    resDesText.set("")
    isChange = False
    for idx in xrange(len(result)):
        if source[idx] != result[idx]:
            wordChangeText.set("".join(senEngToArrayHeb(source[idx])) + "=>" + "".join(senEngToArrayHeb(result[idx])))
            l2.configure(text = "המילה שהוחלפה:")
            isChange = True
            break
    if not isChange:
        l2.configure(text = "")
        wordChangeText.set("")

# Check errors for sentence
def checkError(numberSen,result):
    source = senHebToArrayEng(e1.get())
    desiredResult = answerSens[numberSen]
    isChange = False
    resDesText.set("התוצר הרצוי:" + " ".join(senEngToArrayHeb(" ".join(desiredResult))))
    errorsWords = []
    result = deleteStamValues(result)
    source = deleteStamValues(source)
    for idx in xrange(len(desiredResult)):
        if source[idx] != result[idx] and result[idx] != desiredResult[idx] and source[idx] != desiredResult[idx]:
            errorsWords.append("".join(senEngToArrayHeb(source[idx])) + "=!" + "".join(senEngToArrayHeb(result[idx])) + "=!" +
                              "".join(senEngToArrayHeb(desiredResult[idx])))#
            isChange = True
        elif source[idx] == result[idx] and result[idx] != desiredResult[idx]:
            errorsWords.append("".join("".join(senEngToArrayHeb(result[idx]))) + "=!"
                                       + "".join(senEngToArrayHeb(desiredResult[idx])))
            isChange = True
        elif source[idx] != result[idx] and result[idx] == desiredResult[idx]:
            errorsWords.append("".join("".join(senEngToArrayHeb(source[idx]))) + "=>"
                                       + "".join(senEngToArrayHeb(result[idx])))
            isChange = True
        elif source[idx] != result[idx] and source[idx] == desiredResult[idx]:
            errorsWords.append("".join("".join(senEngToArrayHeb(result[idx]))) + "=!"
                                       + "".join(senEngToArrayHeb(source[idx])))
            isChange = True
    if not isChange:
        l2.configure(text = "")
        wordChangeText.set("")
    else:
        wordChangeText.set("\n".join(errorsWords))
        l2.configure(text = ":השינוים במילים")

# Sometimes you enter blank characters that change the size of the sentence
# So i delele them
def deleteStamValues(array):
    array = np.array(array)
    return list(np.delete(array,np.where(array=='')[0]))

def senEngToArrayHeb(sen):
    newSen = sen.split(" ")
    resultSen = []
    for word in newSen:    
        isFlag = True
        newWord = replace.switchtavToSymbol(word)
        if newWord==None:
            newWord = [replace.switchEngHeb(tav) for tav in word]
            if len(newWord)>0 and newWord[0] == None:
                newWord[0] =' '    
            elif newWord == []:
                isFlag=False
            else:                
                newEndWord = replace.switchEndTavInHeb(newWord[-1])
                
                if(newEndWord != None):
                    newWord[-1]=newEndWord
                newWord = "".join(newWord)                
        if isFlag:
            resultSen.append(newWord)    
    return resultSen

def senHebToArrayEng(sen):
    newSen = [replace.switchHebToEng(tav) for tav in sen]
    for idx,tav in enumerate(newSen):
        if tav == None:
            newSen[idx] =' '
    strSen = "".join(newSen)
    newSen = strSen.split(' ')
    return newSen

# region indexsForErrorList
idxs = [26, 110, 139, 145, 150, 203, 204, 228, 293, 299, 303, 323, 335, 342, 356, 358, 371, 381, 393, 534, 549, 644, 724, 739, 754, 761, 801, 946, 947, 950, 976, 978, 1103, 1126, 1127, 1201, 1299, 1322, 1406, 1424, 1440, 1461, 1488, 1490, 1495, 1534, 1683, 1813, 1920, 1986, 2073, 2147, 2207, 2290, 2293, 2297, 2302, 2464, 2494, 2513, 2731, 2778, 2890, 2981, 3078, 3087, 3092, 3144, 3155, 3195, 3196, 3207, 3234, 3268, 3289, 3291, 3459, 3559, 3664, 3674, 3675, 3679, 3748, 3817, 3873, 3979, 3990, 4099, 4126, 4178, 4204, 4229, 4231, 4281, 4313, 4339, 4398, 4428, 4459, 4570, 4590, 4648, 4681, 4708, 4774, 4808, 4921, 4934, 5020, 5024, 5032, 5036, 5131, 5142, 5146, 5152, 5198, 5250, 5252, 5293, 5299, 5314, 5389, 5445, 5496, 5532, 5545, 5553, 5736, 5853, 5893, 5920, 5969, 6002, 6064, 6096, 6125, 6134, 6151, 6191, 6235, 6463, 6486, 6496, 6500, 6501, 6512, 6597, 6622, 6745, 6757, 6765, 6797, 6801, 6829, 6916, 6958, 6964, 6965, 7005, 7029, 7059, 7073, 7250, 7369, 7375, 7378, 7379, 7383, 7384, 7393, 7395, 7397, 7437, 7448, 7488, 7494, 7495, 7541, 7619, 7630, 7746, 7747, 7786, 7838, 7888, 7974, 8030, 8050, 8101, 8115, 8119, 8169, 8178, 8217, 8228, 8235, 8236, 8282, 8318, 8363, 8377, 8400, 8425, 8449, 8616, 8651, 8706, 8711, 8764, 8822, 8843, 8910, 8919, 8945, 8963, 8976, 9094, 9103, 9117, 9123, 9199, 9214, 9223, 9324, 9353, 9355, 9524, 9592, 9615, 9633, 9639, 9640, 9675, 9708, 9731, 9794, 9812, 9823, 9827, 9838, 9897, 10046, 10067, 10080, 10176, 10178, 10256, 10470, 10473, 10537, 10550, 10567, 10574, 10578, 10583, 10592, 10607, 10610, 10694, 10753, 10755, 10765, 10844, 10864, 10877, 10903, 10911, 10918, 10957, 10979, 11011, 11060, 11095, 11188, 11197, 11217, 11389, 11452, 11536, 11555, 11598, 11601, 11677, 11695, 11732, 11749, 11790, 11841, 11865, 11980, 12074, 12149, 12150, 12188, 12221, 12325, 12397, 12443, 12453, 12507, 12581, 12633, 12664, 12748, 12763, 12780, 12830, 12867, 12870, 12915, 12926, 12965, 12981, 13039, 13041, 13070, 13089, 13099, 13124, 13197, 13214, 13276, 13321, 13398, 13466, 13507, 13557, 13564, 13600, 13634, 13681, 13708, 13756, 13767, 13768, 13852, 13882, 13884, 13901, 13960, 13982, 13984, 13989, 14078, 14251, 14261, 14293, 14342, 14425, 14458, 14477, 14549, 14593, 14622, 14641, 14822, 14863, 14870, 14944, 15190, 15223, 15273, 15286, 15376, 15580, 15588, 15727, 15745, 15903, 16080, 16116, 16148, 16167, 16233, 16298, 16437, 16462, 16465, 16530, 16540, 16544, 16545, 16616, 16670, 16876, 16974, 16990, 16997, 17008, 17010, 17072, 17218, 17235, 17262, 17303, 17317, 17341, 17394, 17496, 17612, 17663, 17666, 17740, 17779, 17840, 17939, 18039, 18095, 18125, 18214, 18216, 18220, 18249, 18321, 18349, 18387, 18422, 18498, 18553, 18573, 18590, 18596, 18660, 18687, 18706, 18737, 18740, 18741, 18754, 18772, 18785, 18860, 19007, 19017, 19059, 19094, 19100, 19209, 19221, 19242, 19356, 19392, 19469, 19493, 19548, 19560, 19589, 19597, 19624, 19647, 19673, 19678, 19702, 19711, 19730, 19746, 19747, 19750, 19771, 19815, 19846, 19904, 19907, 19918, 19920, 19923, 19947, 20079, 20107, 20116, 20127, 20148, 20248, 20317, 20326, 20384, 20401, 20403, 20409, 20466, 20498, 20509, 20538, 20543, 20565, 20566, 20567, 20632, 20651, 20679, 20975, 21015, 21052, 21178, 21259, 21320, 21438, 21560, 21563, 21565, 21570, 21609, 21686, 21700, 21745, 21746, 21754, 21904, 21913, 21927, 21929, 21990, 22018, 22062, 22073, 22149, 22173, 22192, 22196, 22239, 22254, 22260, 22267, 22268, 22278, 22279, 22289, 22317, 22361, 22433, 22436, 22441, 22464, 22472, 22548, 22622, 22656, 22720, 22840, 22882, 22886, 22911, 22934, 22961, 22970, 22977, 22994, 23015, 23047, 23056, 23067, 23086, 23110, 23170, 23210, 23425, 23472, 23575, 23719, 23748, 23821, 23822, 23880, 23909, 23912, 23944, 23950, 23958, 23974, 23986, 24054, 24109, 24128, 24225, 24282, 24332, 24376, 24400, 24420, 24429, 24447, 24500, 24633, 24671, 24686, 24716, 24725, 24789, 24791, 24862, 24910, 25008, 25017, 25125, 25224, 25239, 25240, 25314, 25319, 25376, 25391, 25497, 25502, 25546, 25560, 25563, 25630, 25635, 25638, 25679, 25681, 25683, 25739, 25745, 25867, 25914, 25962, 26029, 26031, 26045, 26159, 26161, 26184, 26355, 26393, 26401, 26415, 26469, 26535, 26553, 26554, 26558, 26588, 26615, 26685, 26688, 26719, 26725, 26804, 26855, 26882, 26908, 26916, 26918, 26970, 27008, 27070, 27094, 27188, 27189, 27199, 27246, 27265, 27267, 27282, 27290, 27352, 27455, 27477, 27505, 27518, 27574, 27629, 27756, 27857, 27999, 28006, 28028, 28072, 28092, 28192, 28195, 28204, 28226, 28229, 28248, 28252, 28269, 28335, 28383, 28395, 28400, 28405, 28412, 28443, 28465, 28693, 28709, 28742, 28765, 28837, 28843, 28859, 28896, 28916, 28939, 28958, 28959, 28961, 28966, 28977, 28978, 28991, 28995, 29007, 29028, 29029, 29032, 29075, 29091, 29164, 29174, 29240, 29348, 29550, 29556, 29573, 29582, 29603, 29659, 29684, 29692, 29694, 29731, 29734, 29740, 29774, 29786, 29872, 29873, 29876, 29915, 29951, 29956, 30004, 30163, 30213, 30272, 30299, 30368, 30442, 30484, 30515, 30522, 30597, 30678, 30696, 30713, 30754, 30940, 30953, 30999, 31137, 31177, 31235, 31238, 31297, 31352, 31388, 31441, 31469, 31474, 31498, 31499, 31502, 31518, 31556, 31731, 31732, 31783, 31809, 31862, 31896, 31997, 32040, 32122, 32168, 32191, 32233, 32261, 32262, 32310, 32402, 32559, 32588, 32624, 32762, 32768, 32811, 32823, 32827, 32847, 32866, 32987, 33000, 33030, 33055, 33071, 33155, 33191, 33199, 33210, 33269, 33330, 33333, 33366, 33386, 33508, 33513, 33576, 33580, 33656, 33667, 33755, 33786, 33877, 34022, 34063, 34119, 34154, 34162, 34186, 34206, 34212, 34251, 34262, 34333, 34366, 34368, 34394, 34461, 34487, 34518, 34527, 34639, 34666, 34699, 34720, 34756, 34766, 34861, 34886, 34918, 34954, 34955, 34987, 35056, 35062, 35076, 35087, 35129, 35133, 35141, 35143, 35162, 35189, 35279, 35290, 35314, 35321, 35328, 35362, 35447, 35513, 35514, 35517, 35524, 35574, 35642, 35662, 35714, 35803, 35820, 35828, 35837, 35841, 35846, 35851, 35943, 35986, 36021, 36077, 36096, 36104, 36117, 36171, 36184, 36192, 36202, 36217, 36232, 36236, 36364, 36376, 36402, 36425, 36490, 36516, 36569, 36612, 36613, 36626, 36702, 36717, 36748, 36763, 36870, 36877, 36978, 37018, 37074, 37191, 37276, 37282, 37325, 37501, 37574, 37611, 37614, 37695, 37697, 37749, 37782, 37836, 37864, 37882, 37988, 38110, 38112, 38132, 38176, 38237, 38388, 38396, 38421, 38424, 38448, 38461, 38525, 38531, 38686, 38738, 38771, 38970, 39008, 39014, 39046, 39086, 39094, 39133, 39137, 39169, 39235, 39288, 39365, 39402, 39405, 39428, 39518, 39554, 39569, 39592, 39671, 39674, 39676, 39727, 39809, 39820, 39823, 39858, 39952, 40008, 40078, 40165, 40274, 40284, 40292, 40370, 40516, 40520, 40521, 40531, 40547, 40557, 40567, 40568, 40578, 40626, 40648, 40806, 40808, 40825, 40841, 40902, 40904, 40924, 40951, 40993, 41015, 41052, 41056, 41063, 41074, 41082, 41089, 41097, 41235, 41244, 41274, 41295, 41300, 41302, 41321, 41361, 41367, 41453, 41540, 41624, 41703, 41722, 41762, 41797, 41827, 41917, 41947, 42006, 42149, 42178, 42189, 42199, 42206, 42271, 42436, 42486, 42499, 42563, 42572, 42624, 42640, 42719, 42724, 42731, 42954, 43016, 43045, 43058, 43149, 43186, 43224, 43248, 43273, 43308, 43314, 43325, 43330, 43382, 43433, 43441, 43517, 43552, 43578, 43579, 43616, 43647, 43690, 43780, 43814, 43836, 43860, 43889, 43968, 44035, 44038, 44041, 44101, 44132, 44152, 44156, 44185, 44374, 44396, 44446, 44507, 44526, 44721, 44729, 44763, 44768, 44813, 44819, 44828, 44836, 44913, 44943, 44960, 45024, 45030, 45080, 45081, 45161, 45206, 45226, 45232, 45248, 45275, 45277, 45349, 45397, 45450, 45482, 45536, 45539, 45551, 45807, 45833, 45886, 45907, 45934, 45936, 46022, 46033, 46160, 46196, 46243, 46305, 46362, 46389, 46494, 46586, 46664, 46680, 46717, 46719, 46774, 46776, 46789, 46806, 46935, 46952, 46996, 47048, 47055, 47078, 47085, 47117, 47198, 47222, 47293, 47336, 47371, 47412, 47462, 47530, 47552, 47577, 47582, 47585, 47678, 47722, 47746, 47966, 47969, 48206, 48214, 48249, 48258, 48268, 48284, 48289, 48295, 48300, 48496, 48508, 48515, 48538, 48553, 48669, 48678, 48696, 48710, 48711, 48726, 48918, 48924, 48991, 49050, 49075, 49171, 49172, 49188, 49189, 49192, 49205, 49240, 49287, 49377, 49448, 49468, 49504, 49513, 49667, 49680, 49684, 49707, 49719, 49730, 49737, 49742, 49752, 49771, 49807, 49871, 49977, 50304, 50318, 50496, 50598, 50643, 50737, 50750, 50789, 50867, 50911, 51115, 51116, 51208, 51222, 51235, 51241, 51267, 51271, 51303, 51338, 51351, 51356, 51366, 51399, 51470, 51543, 51589, 51592, 51649, 51680, 51682, 51876, 51887, 51891, 51895, 51896, 51910, 51943, 51950, 51976, 52001, 52033, 52081, 52159, 52177, 52179, 52180, 52182, 52183, 52184, 52196, 52233, 52239, 52337, 52345, 52358, 52361, 52449, 52469, 52489, 52498, 52503, 52504, 52578, 52579, 52632, 52651, 52662, 52705, 52711, 52746, 52913, 53064, 53138, 53167, 53182, 53198, 53265, 53348, 53352, 53387, 53413, 53421, 53496, 53526, 53533, 53573, 53591, 53593, 53608, 53679, 53684, 53712, 53770, 53788, 53796, 53822, 53906, 54007, 54029, 54030, 54119, 54167, 54188, 54246, 54296, 54302, 54312, 54326, 54331, 54374, 54457, 54465, 54527, 54528, 54537, 54556, 54561, 54714, 54734, 54760, 54762, 54822, 54828, 54843, 54877, 54883, 54915, 54994, 55006, 55053, 55069, 55084, 55130, 55151, 55161, 55185, 55218, 55237, 55244, 55400, 55425, 55432, 55483, 55500, 55593, 55596, 55648, 55714, 55720, 55798, 55807, 55850, 55890, 55918, 55958, 56035, 56040, 56045, 56052, 56077, 56127, 56174, 56185, 56243, 56271, 56277, 56281, 56436, 56444, 56536, 56553, 56631, 56703, 56720, 56822, 56829, 56850, 56900, 56952, 57086, 57099, 57170, 57171, 57234, 57242, 57288, 57289, 57368, 57376, 57393, 57406, 57536, 57541, 57593, 57596, 57642, 57730, 57733, 57742, 57800, 57810, 57883, 57896, 57904, 57909, 57975, 58007, 58039, 58089, 58148, 58240, 58244, 58319, 58360, 58361, 58386, 58413, 58432, 58526, 58603, 58674, 58678, 58753, 58841, 58842, 58848, 58855, 58858, 58879, 58901, 58924, 58946, 58959, 58965, 59022, 59023, 59110, 59122, 59190, 59214, 59309, 59317, 59329, 59344, 59360, 59378, 59390, 59558, 59562, 59578, 59648, 59784, 59888, 60103, 60164, 60266, 60348, 60408, 60477, 60494, 60542, 60670, 60681, 60735, 60753, 60791, 60794, 60834, 60882, 60895, 60896, 60902, 60913, 60938, 61033, 61097, 61110, 61179, 61220, 61260, 61264, 61380, 61421, 61451, 61480, 61481, 61493, 61507, 61589, 61631, 61634, 61659, 61701, 61712, 61719, 61745, 61747, 61813, 61976, 62008, 62040, 62081, 62142, 62169, 62204, 62319, 62326, 62400, 62454, 62475, 62497, 62580, 62644, 62654, 62662, 62680, 62681, 62684, 62863, 62890, 62921, 63038, 63069, 63086, 63130, 63146, 63247, 63283, 63427, 63514, 63599, 63611, 63674, 63681, 63714, 63719, 63725, 63731, 63747, 63791, 63834, 63885, 63946, 63949, 63975, 64056, 64089, 64117, 64131, 64173, 64177, 64185, 64187, 64194, 64205, 64209, 64289, 64483, 64533, 64541, 64556, 64586, 64668, 64889, 64890, 64961, 65042, 65046, 65073, 65078, 65098, 65111, 65119, 65126, 65224, 65342, 65378, 65414, 65420, 65424, 65461, 65469, 65470, 65471, 65498, 65546, 65585, 65590, 65595, 65599, 65786, 65848, 65875, 65876, 65887, 65976, 65977, 65988, 66011, 66022, 66023, 66119, 66311, 66316, 66330, 66353, 66359, 66403, 66438, 66506, 66515, 66563, 66618, 66718, 66732, 66750, 66772, 66780, 66811, 66841, 66849, 66888, 66892, 66939, 66967, 67003, 67172, 67284, 67454, 67475, 67560, 67657, 67705, 67709, 67713, 67848, 67875, 67880, 67912, 67979, 68068, 68146, 68219, 68289, 68340, 68341, 68385, 68427, 68440, 68462, 68464, 68473, 68481, 68508, 68527, 68557, 68571, 68572, 68604, 68678, 68743, 68784, 68787, 68819, 68824, 68829, 68855, 68923, 68962, 68972, 68975, 69011, 69095, 69221, 69234, 69301, 69310, 69370, 69387, 69694, 69705, 69835, 69842, 69844, 69912, 69916, 70069, 70076, 70099, 70326, 70332, 70488, 70493, 70525, 70559, 70585, 70634, 70708, 70713, 70751, 70757, 70770, 70831, 70868, 70873, 70874, 70948, 71065, 71095, 71215, 71327, 71336, 71397, 71431, 71524, 71540, 71609, 71652, 71688, 71712, 71777, 71808, 71834, 71897, 72020, 72083, 72137, 72198, 72205, 72223, 72327, 72379, 72499, 72512, 72535, 72538, 72559, 72582, 72628, 72634, 72653, 72682, 72683, 72731, 72787, 72866, 72940, 73040, 73103, 73119, 73133, 73188, 73209, 73217, 73248, 73266, 73314, 73363, 73418, 73433, 73482, 73513, 73567, 73572, 73658, 73689, 73714, 73808, 73881, 73882, 73895, 73904, 73978, 73981, 74059, 74090, 74109, 74112, 74141, 74193, 74292, 74302, 74305, 74342, 74363, 74400, 74525, 74529, 74612, 74614, 74696, 74731, 74751, 74808, 74814, 74893, 75000, 75031, 75039, 75117, 75126, 75141, 75238, 75240, 75251, 75400, 75404, 75485, 75494, 75507, 75526, 75595, 75643, 75690, 75703, 75734, 75743, 75745, 75755, 75782, 75787, 75792, 75806, 75809, 75810, 75827, 75847, 75859, 75867, 75935, 75944, 75957, 75970, 76010, 76089, 76201, 76216, 76218, 76273, 76289, 76318, 76320, 76326, 76343, 76369, 76445, 76573, 76710, 76752, 76829, 76920, 76942, 76951, 77040, 77122, 77129, 77196, 77208, 77227, 77280, 77322, 77332, 77343, 77345, 77364, 77378, 77516, 77570, 77617, 77639, 77641, 77649, 77652, 77816, 77817, 77825, 77838, 77886, 77982, 78027, 78114, 78125, 78350, 78378, 78405, 78410, 78416, 78447, 78553, 78561, 78599, 78714, 78782, 78886, 78948, 78968, 79035, 79202, 79258, 79292, 79331, 79338, 79361, 79384, 79415, 79492, 79506, 79512, 79554, 79658, 79689, 79738, 79758, 79792, 79878, 79929, 80062, 80186, 80202, 80217, 80218, 80251, 80255, 80279, 80416, 80442, 80464, 80495, 80577, 80708, 80777, 80917, 80927, 80928, 80929, 80930, 80990, 81004, 81005, 81011, 81032, 81070, 81131, 81148, 81308, 81329, 81331, 81443, 81485, 81503, 81513, 81564, 81600, 81680, 81697, 81757, 81773, 81780, 81889, 81899, 81910, 81922, 81930, 81932, 81936, 82000, 82042, 82049, 82078, 82103, 82113, 82134, 82165, 82239, 82272, 82281, 82344, 82348, 82423, 82434, 82552, 82569, 82608, 82634, 82753, 82764, 82769, 82795, 82796, 82797, 82809, 82814, 82847, 83064, 83088, 83091, 83158, 83265, 83304, 83309, 83320, 83321, 83329, 83332, 83367, 83384, 83389, 83433, 83450, 83468, 83485, 83488, 83494, 83562, 83564, 83654, 83671, 83928, 83934, 83956, 84003, 84024, 84136, 84192, 84204, 84368, 84397, 84598, 84629, 85003, 85071, 85077, 85088, 85100, 85123, 85164, 85166, 85167, 85168, 85175, 85184, 85278, 85283, 85290, 85333, 85355, 85377, 85383, 85420, 85548, 85553, 85568, 85589, 85653, 85685, 85746, 85772, 85780, 85828, 85848, 85858, 85876, 85888, 85889, 85893, 85908, 85967, 85969, 86389, 86421, 86486, 86552, 86581, 86591, 86722, 86744, 86768, 86814, 86872, 86909, 86940, 87100, 87185, 87205, 87266, 87327, 87379, 87472, 87507, 87509, 87551, 87613, 87649, 87704, 87721, 87748, 87806, 87860, 87867, 87922, 87979, 88173, 88185, 88204, 88270, 88286, 88289, 88307, 88371, 88385, 88437, 88457, 88696, 88749, 88837, 88873, 88877, 88908, 88946, 88947, 88976, 88977, 88985, 89061, 89111, 89190, 89206, 89220, 89255, 89287, 89336, 89378, 89434, 89509, 89514, 89594, 89595, 89596, 89676, 89754, 89921, 89935, 89999, 90078, 90083, 90122, 90135, 90183, 90230, 90255, 90279, 90287, 90348, 90378, 90413, 90430, 90643, 90690, 90701, 90777, 90886, 90973, 91019, 91069, 91079, 91208, 91334, 91380, 91430, 91649, 91717, 91725, 91813, 91826, 91858, 92012, 92139, 92178, 92271, 92354, 92428, 92581, 92696, 92750, 92783, 92870, 92887, 92889, 92925, 92966, 92984, 93005, 93006, 93026, 93123, 93149, 93245, 93262, 93306, 93394, 93485, 93595, 93621, 93635, 93642, 93661, 93913, 93938, 93976, 94006, 94031, 94061, 94074, 94138, 94159, 94285, 94303, 94330, 94413, 94501, 94502, 94544, 94667, 94709, 94793, 94796, 94797, 94820, 94922, 94923, 94946, 94970, 94980, 95176, 95223, 95306, 95312, 95326, 95331, 95373, 95451, 95482, 95487, 95704, 95739, 95791, 95796, 95849, 95950, 95964, 95980, 96030, 96209, 96259, 96412, 96415, 96492, 96494, 96502, 96665, 96712, 96764, 96780, 96787, 96826, 96885, 96929, 96959, 97012, 97017, 97049, 97113, 97126, 97218, 97298, 97384, 97444, 97461, 97561, 97681, 97752, 97841, 97845, 97933, 97946, 97947, 97983, 98043, 98046, 98048, 98195, 98203, 98338, 98420, 98455, 98464, 98489, 98563, 98648, 98650, 98681, 99163, 99192, 99246, 99391, 99480, 99488, 99499, 99504, 99528, 99640, 99644, 99678, 99689, 99694, 99712, 99729, 99746, 99763, 99935, 99940, 99948, 99955, 100006, 100007, 100136, 100253, 100270, 100280, 100433, 100464, 100591, 100652, 100771, 100821, 100848, 100850, 100877, 100909, 100950, 100954, 100961, 100985, 101043, 101066, 101087, 101110, 101160, 101184, 101212, 101222, 101228, 101261, 101274, 101313, 101336, 101350, 101352, 101380, 101407, 101467, 101532, 101568, 101633, 101767, 101787, 101852, 101869, 102088, 102089, 102182, 102203, 102228, 102269, 102407, 102424, 102425, 102582, 102623, 102626, 102629, 102638, 102658, 102688, 102736, 102739]
# endregion

# Start Gui
master = Tk()
master.title('פרויקט בשיכול אותיות')

master.geometry("1200x500")
# master.resizable(0,0)

mySizeFont = font=('Tahoma',12);
Label(master, text = "הכנס משפט לבדיקת שיכול אותיות" , font = mySizeFont).pack()

e1 = Entry(master, width=120,font = mySizeFont,justify='right')

e1.bind("<Return>",show_entry_fields)
e1.pack()

# e1.insert(10,"שלום")
e1.insert(10,"רוצה לבוא לאכול גדילה?")
#
b1 = Button(text ="מצא שיכול אותיות", command = show_entry_fields, font = mySizeFont)
b1.pack()

sourceSen = Label(master,font = mySizeFont)
sourceSen.pack()

resText = StringVar()

res = Label(master,textvariable = resText, fg = "blue",font = mySizeFont)
res.pack()

resDesText = StringVar()

resDes = Label(master,textvariable = resDesText, fg = "purple",font = mySizeFont)
resDes.pack()


l2 = Label(master, font = mySizeFont)
l2.pack()

wordChangeText = StringVar()

cha = Label(master,textvariable = wordChangeText, fg = "green", font = mySizeFont)
cha.pack()

Label(master, text = ":בחר משפט מתוך קורפוס המבחן",font = mySizeFont).pack()
limit = len(testSens)

s1 = Spinbox(master, from_=1, to=limit+1,justify='right',font = mySizeFont)
s1.bind("<Return>", enter_sen_for_test_list)
s1.pack()

b2 = Button(text ="מצא שיכול אותיות", command = enter_sen_for_test_list, font = mySizeFont)
b2.pack()

Label(master, text = ":בחר משפט מתוך השגיאות שהיו בקורפוס",font = mySizeFont).pack()
s2 = Spinbox(master, values=idxs,justify='right',font = mySizeFont, fg = "red")
s2.bind("<Return>", enter_sen_for_error_test_list)
s2.pack()

b3 = Button(text ="מצא שיכול אותיות", command = enter_sen_for_error_test_list, font = mySizeFont)
b3.pack()

mainloop()

#endregion